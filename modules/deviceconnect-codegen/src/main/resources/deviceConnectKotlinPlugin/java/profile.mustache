package {{profilePackage}};

import android.content.Intent;
import android.os.Bundle;

{{#hasEventApi}}
import org.deviceconnect.android.event.Event;
import org.deviceconnect.android.event.EventError;
import org.deviceconnect.android.event.EventManager;
{{/hasEventApi}}
import org.deviceconnect.android.message.MessageUtils;
import org.deviceconnect.android.profile.DConnectProfile;
{{#hasGetApi}}
import org.deviceconnect.android.profile.api.GetApi;
{{/hasGetApi}}
{{#hasPostApi}}
import org.deviceconnect.android.profile.api.PostApi;
{{/hasPostApi}}
{{#hasPutApi}}
import org.deviceconnect.android.profile.api.PutApi;
{{/hasPutApi}}
{{#hasDeleteApi}}
import org.deviceconnect.android.profile.api.DeleteApi;
{{/hasDeleteApi}}
import org.deviceconnect.message.DConnectMessage;
{{#hasEventApi}}

import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;
{{/hasEventApi}}

class {{profileClass}}() : DConnectProfile() {

     init {
        {{#apiList}}
        // {{apiId}}
        addApi(object : {{#getApi}}Get{{/getApi}}{{#postApi}}Post{{/postApi}}{{#putApi}}Put{{/putApi}}{{#deleteApi}}Delete{{/deleteApi}}Api() {
            {{#interface}}
            override fun getInterface(): String {
                return "{{interface}}";
            }

            {{/interface}}
            {{#attribute}}
            override fun getAttribute(): String {
                return "{{attribute}}";
            }

            {{/attribute}}
            override fun onRequest(request: Intent, response: Intent): Boolean  {
                {{#paramList}}
                {{{declaration}}}
                {{/paramList}}

                {{#isOneShotApi}}
                // TODO ここでAPIを実装してください. 以下はサンプルのレスポンス作成処理です.
                setResult(response, DConnectMessage.RESULT_OK)
                {{#responses}}
                {{{.}}}
                {{/responses}}
                {{/isOneShotApi}}
                {{#isEventApi}}
                {{#putApi}}
                val error = EventManager.INSTANCE.addEvent(request)
                when (error) {
                    EventError.NONE -> {
                        setResult(response, DConnectMessage.RESULT_OK)

                        // 以下、サンプルのイベントの定期的送信を開始.
                        val task: TimerTask = object : TimerTask() {
                            override fun run() {
                                val event =
                                    EventManager.INSTANCE.getEvent(request)
                                val message = EventManager.createEventMessage(event)
                                {{#events}}
                                {{{.}}}
                                {{/events}}
                                sendEvent(message, event.accessToken)
                            }
                        }
                        startTimer(serviceId!!, task, {{#canSetInterval}}interval{{/canSetInterval}}{{^canSetInterval}}1000L{{/canSetInterval}});
                      }
                     EventError.INVALID_PARAMETER -> MessageUtils.setInvalidRequestParameterError(
                         response
                     )
                     else -> MessageUtils.setUnknownError(response)
                }
                {{/putApi}}
                {{#deleteApi}}
                val error = EventManager.INSTANCE.removeEvent(request)
                when (error) {
                    EventError.NONE -> {
                        setResult(response, DConnectMessage.RESULT_OK)
                        // 以下、サンプルのイベントの定期的送信を停止.
                        stopTimer(serviceId!!)
                    }
                    EventError.INVALID_PARAMETER -> MessageUtils.setInvalidRequestParameterError(
                        response
                    )
                    EventError.NOT_FOUND -> MessageUtils.setUnknownError(
                        response,
                        "Event is not registered."
                    )
                    else -> MessageUtils.setUnknownError(response)
                }
                {{/deleteApi}}
                {{/isEventApi}}
                return true;
            }
        });

        {{/apiList}}
    }

    override fun getProfileName(): String {
        return "{{profileNameDefinition}}";
    }
    {{#hasEventApi}}

    private val mTimerTasks: MutableMap<String, TimerTask> = ConcurrentHashMap()
    private val mTimer = Timer()

    private fun startTimer(
            taskId: String,
            task: TimerTask,
            interval: Long?
    ) {
      synchronized(mTimerTasks) {
          stopTimer(taskId)
          mTimerTasks[taskId] = task
          mTimer.scheduleAtFixedRate(task, 0, interval ?: 1000L)
      }
    }

    private fun stopTimer(taskId: String) {
        synchronized(mTimerTasks) {
            val timer = mTimerTasks.remove(taskId)
            timer?.cancel()
        }
    }
    {{/hasEventApi}}
}
